// This is a generated file 
// Generated by ResouceKit 
// You can write custom imoprt XXXX logic
import UIKit
protocol XibProtocol {
	var name: String { get } 
	 func nib() -> UINib
}
extension UITableView { 
	internal func registerNib(nib: XibProtocol) -> Void {
		registerNib(nib.nib(), forCellReuseIdentifier: nib.name)
	}
	internal func registerNibs(nibs: [XibProtocol]) -> Void {
		nibs.forEach(registerNib)
	}
	 
} 

extension UICollectionView { 
	internal func registerNib(nib: XibProtocol) -> Void {
		registerNib(nib.nib(), forCellWithReuseIdentifier: nib.name)
	}
	internal func registerNibs(nibs: [XibProtocol]) -> Void {
		nibs.forEach(registerNib)
	}
	 
} 

extension ViewController { 
	class func initialViewController() -> ViewController {
		let storyboard = UIStoryboard(name: "ViewController", bundle: nil) 
		let viewController = storyboard.instantiateInitialViewController() as! ViewController
		return viewController
	}
	internal func perFormSegueShowSecondTable(sender: AnyObject? = nil) -> Void {
		performSegueWithIdentifier("ShowSecondTable", sender: sender)
	}
	struct Segue {
		static let showSecondTable: String = "ShowSecondTable"

	
	} 
} 

extension TableViewController { 
	class func instanceFromTabBarController() -> TableViewController {
		let storyboard = UIStoryboard(name: "TabBarController", bundle: nil) 
		let viewController = storyboard.instantiateViewControllerWithIdentifier("TableView") as! TableViewController
		return viewController
	}
	internal func perFormSegueShowViewController(sender: AnyObject? = nil) -> Void {
		performSegueWithIdentifier("ShowViewController", sender: sender)
	}
	struct Segue {
		static let showViewController: String = "ShowViewController"

	
	} 
} 

extension OverrideViewController { 
	class override func initialViewController() -> OverrideViewController {
		let storyboard = UIStoryboard(name: "OverrideViewController", bundle: nil) 
		let viewController = storyboard.instantiateInitialViewController() as! OverrideViewController
		return viewController
	}
	override func perFormSegueShowSecondTable(sender: AnyObject? = nil) -> Void {
		performSegueWithIdentifier("ShowSecondTable", sender: sender)
	}
	struct Segue {
		static let showSecondTable: String = "ShowSecondTable"

	
	} 
} 

extension SecondTableViewController { 
	class func initialViewController() -> SecondTableViewController {
		let storyboard = UIStoryboard(name: "SecondTableViewController", bundle: nil) 
		let viewController = storyboard.instantiateInitialViewController() as! SecondTableViewController
		return viewController
	}
	internal func perFormSegueShowOverride(sender: AnyObject? = nil) -> Void {
		performSegueWithIdentifier("ShowOverride", sender: sender)
	}
	struct Segue {
		static let showOverride: String = "ShowOverride"

	
	} 
} 

extension CollectionViewController { 
	class func instanceFromTabBarController() -> CollectionViewController {
		let storyboard = UIStoryboard(name: "TabBarController", bundle: nil) 
		let viewController = storyboard.instantiateViewControllerWithIdentifier("CollectionView") as! CollectionViewController
		return viewController
	}
	internal func perFormSegueShowViewController(sender: AnyObject? = nil) -> Void {
		performSegueWithIdentifier("ShowViewController", sender: sender)
	}
	struct Segue {
		static let showViewController: String = "ShowViewController"

	
	} 
} 

extension SecondCollectionViewController { 
	class func instanceFromTabBarController() -> SecondCollectionViewController {
		let storyboard = UIStoryboard(name: "TabBarController", bundle: nil) 
		let viewController = storyboard.instantiateViewControllerWithIdentifier("SecondCollectionView") as! SecondCollectionViewController
		return viewController
	}
	 
} 

extension UITabBarController { 
	class func initialViewController() -> UITabBarController {
		let storyboard = UIStoryboard(name: "TabBarController", bundle: nil) 
		let viewController = storyboard.instantiateInitialViewController() as! UITabBarController
		return viewController
	}
	 
} 

extension UINavigationController { 
	class func instanceFromTabBarControllerNav1() -> UINavigationController {
		let storyboard = UIStoryboard(name: "TabBarController", bundle: nil) 
		let viewController = storyboard.instantiateViewControllerWithIdentifier("Nav1") as! UINavigationController
		return viewController
	}
	class func instanceFromTabBarControllerNav2() -> UINavigationController {
		let storyboard = UIStoryboard(name: "TabBarController", bundle: nil) 
		let viewController = storyboard.instantiateViewControllerWithIdentifier("Nav2") as! UINavigationController
		return viewController
	}
	 
} 
extension SecondTableViewCell { 
	
	struct Reusable {
		static let ReuseIdentifier: String = "ReuseIdentifier"

	
	} 
} 
extension SecondCollectionViewCell { 
	
	struct Reusable {
		static let ReuseIdentifier: String = "ReuseIdentifier"

	
	} 
} 
extension TableViewCell { 
	
	struct Xib: XibProtocol {
		let name: String = "TableViewCell"

		internal func nib() -> UINib {
		return UINib(nibName: "TableViewCell", bundle: nil) 
	}
		internal func view() -> TableViewCell {
		return nib().instantiateWithOwner(nil, options: nil)[0] as! TableViewCell
	}
	} 
} 

extension CollectionViewCell { 
	
	struct Xib: XibProtocol {
		let name: String = "CollectionViewCell"

		internal func nib() -> UINib {
		return UINib(nibName: "CollectionViewCell", bundle: nil) 
	}
		internal func view() -> CollectionViewCell {
		return nib().instantiateWithOwner(nil, options: nil)[0] as! CollectionViewCell
	}
	} 
} 

extension CustomView { 
	
	struct Xib: XibProtocol {
		let name: String = "CustomView"

		internal func nib() -> UINib {
		return UINib(nibName: "CustomView", bundle: nil) 
	}
		internal func view() -> CustomView {
		return nib().instantiateWithOwner(nil, options: nil)[0] as! CustomView
	}
	} 
} 
