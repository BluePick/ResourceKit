//
//  component.swift
//  o
//
//  Created by Hirose.Yudai on 2016/04/07.
//  Copyright © 2016年 Hirose.Yudai. All rights reserved.
//

import Foundation

let newLine = "\n"
let indent = "\t"
let lineAndIndent = newLine + indent

let Header = [
    "// This is a generated file \n",
    "// Generated by ResouceKit \n",
    "// You can write custom imoprt XXXX logic"
].joinWithSeparator("") + newLine


enum Environment: String {
    case PROJECT_FILE_PATH
    case TARGET_NAME
    
    case BUILT_PRODUCTS_DIR
    case DEVELOPER_DIR
    case SDKROOT
    case SOURCE_ROOT
    case SRCROOT
    
    private static var environment: [String: String] {
        return NSProcessInfo.processInfo().environment
    }
    
    var element: String {
        return Environment.environment[self.rawValue]!
    }
    
    var path: NSURL {
        return NSURL(fileURLWithPath: element)
    }
    
    static func environmentWith(sourceTreeFolder: SourceTreeFolder) -> Environment {
        switch sourceTreeFolder {
        case .BuildProductsDir:
            return BUILT_PRODUCTS_DIR
        case .DeveloperDir:
            return DEVELOPER_DIR
        case .SDKRoot:
            return SDKROOT
        case .SourceRoot:
            return SOURCE_ROOT
        }
    }
    
    static func pathFrom(path: Path) -> NSURL {
        switch path {
        case .Absolute(let absolutePath):
            return NSURL(fileURLWithPath: absolutePath)
        case .RelativeTo(let sourceTreeFolder, let relativePath):
            return environmentWith(sourceTreeFolder)
                .path
                .URLByAppendingPathComponent(relativePath)
        }
    }
    
    private static var elements: [Environment] {
        return [PROJECT_FILE_PATH ,TARGET_NAME, BUILT_PRODUCTS_DIR ,DEVELOPER_DIR ,SDKROOT ,SOURCE_ROOT ,SRCROOT]
    }
    
    static func verifyUseEnvironment() throws {
        if let empty = elements.filter ({ Environment.environment[$0.rawValue] == nil }).first {
            throw ResourceKitErrorType.environmentError(environmentKey: empty.rawValue, errorInfo: ResourceKitErrorType.createErrorInfo())
        }
    }
    
}
